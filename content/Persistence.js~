//Storage module
Components.utils.import("resource://gre/modules/Services.jsm");  
Components.utils.import("resource://gre/modules/FileUtils.jsm");

var file = FileUtils.getFile("ProfD", ["bayatest.sqlite"]);
var db = Services.storage.openDatabase(file);
log("Database creato");
//Function for creating the db structure if is empty
try{
    db.executeSimpleSQL('create table if not exists ParameterValues' +
        '(componentName varchar(100), conf varchar(1000), desc varchar(1000),'+
        ' usage int(10), TimeStamp int(100),primary key(componentName, conf) )');

}catch(e){
    log(e);
}

//ONLY FOR THE DEMO
function fill4DEMO(){
    try{
        var stmt = db.createStatement("INSERT INTO ParameterValues (componentName, conf, desc ) values(:name, :conf, :desc )");
        stmt.params.name = "urlbuilder";
        stmt.params.desc = "To be decided";
        stmt.params.conf = '{"conf":{"BASE":{"value":"http://ws.geoname.org/","type":"text"},"PORT":{"value":"0","type":"number"},"PATH":{"value":"abc","type":"text"},"PARAM":[{"key":{"value":"abc","type":"text"},"value":{"value":"1","type":"text"}}]}}';
    
        stmt.executeAsync();
    } catch(e){
        log(e.message +" "+e.lineNumber);
    } finally {
        stmt.reset();
    }

}

fill4DEMO();


function getPvList(name, conf){
    try{
        var stmt = db.createStatement("SELECT * FROM ParameterValues WHERE componentName like :name and conf like :conf ");
        res.pv = new Array();
        stmt.params.name = name;
        stmt.params.conf = "%"+conf+"%";
    
        stmt.executeAsync({
            handleResult:  function (resSet){
                for(var row = resSet.getNextRow(); row; row.resSet.getNextRow() ){
                    var tmp = new DbRes();
                    log("a result has been found for "+name);
                    tmp.json = row.getResultByName("conf");
                    tmp.html = createHTMLDescription(name ,row.getResultByName("desc"));
                    tmp.name = name;
                    res.pv.push(tmp);
                    log("tmp.json = "+tmp.json);
                    log("tmp.html = "+tmp.html);
                    log("length = "+res.pv.length);
                    
                }
            },
            handleError: function(aError) {  
                log("Error: " + aError.message);  
            },  
  
            handleCompletion: function(aReason) {  
                if (aReason != Components.interfaces.mozIStorageStatementCallback.REASON_FINISHED)  
                    log("Query canceled or aborted!");
                    
                if(res.pv.length != 0){
                    var html = [];
                    for(i in res.pv){
                        html.push(createHTMLThumb(res.pv[i]));
                    }
                    show(parval, html);
                }
                else{
                    hide(parval);
                }
            }
        });
    } catch(e){
        log(e.message+", line"+e.lineNumber);
    } 
}

function getComCoList(name){
    try{
        var stmt = db.createStatement("SELECT * FROM ComponentCooc WHERE componentName like :name ");
        res.comp_co = new Array();
        stmt.params.name = name;
    
        stmt.executeAsync({
            handleResult:  function (resSet){
                for(var row = resSet.getNextRow(); row; row.resSet.getNextRow() ){
                    var tmp = new DbRes();
                    log("a result has been found for "+name);
                    tmp.json = row.getResultByName("conf");
                    tmp.html = createHTMLDescription(name ,row.getResultByName("desc"));
                    tmp.name = name;
                    res.comp_co.push(tmp);
                    log("tmp.json = "+tmp.json);
                    log("tmp.html = "+tmp.html);
                    log("length = "+res.pv.length);
                    
                }
            },
            handleError: function(aError) {  
                log("Error: " + aError.message);  
            },  
  
            handleCompletion: function(aReason) {  
                if (aReason != Components.interfaces.mozIStorageStatementCallback.REASON_FINISHED)  
                    log("Query canceled or aborted!");
                    
                if(res.pv.length != 0){
                    var html = [];
                    for(i in res.comp_co){
                        html.push(createHTMLThumb(res.comp_co[i]));
                    }
                    show(compco, html);
                }
                else{
                var html = [];
                var tmp = new DbRes();
                tmp.name = "urlbuilder";
                tmp.json = "";
                tmp.thumbnail ="";
                tmp.html ="";
                html.push(createHTMLThumb(tmp));
                show(compco, html);
                }
            }
        });
    } catch(e){
        log(e.message+", line"+e.lineNumber);
    } 
}

function createHTMLDescription(name, desc){
    var tmp = "<div>";
    tmp += "<h3>";
    tmp += name;
    tmp += "</h3>";
    tmp += desc;
    tmp += "</div>";
    return tmp;
}
function createHTMLThumb(obj){
    
    log("Creating html thumb")
    var res;
    res = document.createElementNS("http://www.w3.org/1999/xhtml", "span");
    
    var btn = document.createElementNS("http://www.w3.org/1999/xhtml", "button");
    btn.setAttribute("class", "ok-button");
    btn.setAttribute("type", "button");
    btn.setAttribute("onclick", "weavePvalue(\""+obj.name+"\", "+obj.json+" )");
    //btn.setAttribute("onclick", "weave()" );
    
    var img = document.createElementNS("http://www.w3.org/1999/xhtml", "img");
    img.setAttribute("src", obj.thumbnail);
    
    btn.appendChild(img);
    res.appendChild(btn);
    
    return res;
}

function weave(){
    var str  ="";
    str += "?_out=json";
    str += "&id="+session.id;
    str += "&name="+session.name;
    if(session.tags)
        str += "&tags="+session.tags;
    
    var tmp = '{"layout":[{"id":"_OUTPUT","xy":[177,85]},{"id":"sw-103","xy":[385,223]}],"modules":[{"type":"output","id":"_OUTPUT","conf":{}},{"type":"urlbuilder","id":"sw-103","conf":{"BASE":{"value":"http://ws.geonames.org","type":"text"},"PORT":{"value":"0","type":"number"},"PATH":{"value":"abc","type":"text"},"PARAM":[{"key":{"value":"abc","type":"text"},"value":{"value":"abc","type":"text"}}]}}],"terminaldata":[],"wires":[]}';
    str += "&_def="+tmp.toString();
    str += "&rnd="+session.rnd;
    str += "&.crumb="+session.crumb;
    savePattern(str);
}